name: WebAssembly Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [created]
  # 允许手动触发
  workflow_dispatch:

jobs:
  build-wasm:
    name: Emscripten Build
    runs-on: ubuntu-latest
    
    steps:
      # 检出代码，包括子模块
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      
      # 设置Python
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      # 打印环境信息
      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
          echo "当前目录内容:"
          ls -la
      
      # 安装依赖
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build cmake xorg-dev libglu1-mesa-dev p7zip-full
          ninja --version
          cmake --version
          gcc --version
      
      # 手动安装Emscripten SDK（不使用GitHub Actions缓存）
      - name: Install Emscripten SDK
        run: |
          echo "正在安装Emscripten SDK..."
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install 3.1.19
          ./emsdk activate 3.1.19
          echo "Emscripten SDK安装完成"
          
          # 设置环境变量以在后续步骤中使用
          echo "EMSDK=$(pwd)" >> $GITHUB_ENV
          echo "EM_CONFIG=$(pwd)/.emscripten" >> $GITHUB_ENV
          echo "EMSDK_NODE=$(pwd)/node/14.18.2_64bit/bin/node" >> $GITHUB_ENV
          echo "PATH=$(pwd):$(pwd)/upstream/emscripten:$(pwd)/node/14.18.2_64bit/bin:$PATH" >> $GITHUB_ENV
      
      # 验证Emscripten安装
      - name: Verify Emscripten
        run: |
          source $EMSDK/emsdk_env.sh
          emcc --version
          which emcc
          which em++
      
      # 修补TBB以解决线程问题
      - name: Patch TBB for Emscripten
        shell: bash
        run: |
          echo "创建TBB补丁..."
          cat > patch_tbb.txt << 'EOL'
          diff --git a/wowViewerLib/3rdparty/oneTbb/cmake/compilers/Clang.cmake b/wowViewerLib/3rdparty/oneTbb/cmake/compilers/Clang.cmake
          index xxxxxxx..xxxxxxx 100644
          --- a/wowViewerLib/3rdparty/oneTbb/cmake/compilers/Clang.cmake
          +++ b/wowViewerLib/3rdparty/oneTbb/cmake/compilers/Clang.cmake
          @@ -17,7 +17,9 @@ if (NOT MSVC)
               set(TBB_LIB_COMPILE_FLAGS -fPIC -Wno-missing-braces)
           endif()
           
          -set_property(TARGET Threads::Threads PROPERTY INTERFACE_COMPILE_OPTIONS ${TBB_COMMON_COMPILE_FLAGS})
          +if (TARGET Threads::Threads)
          +  set_property(TARGET Threads::Threads PROPERTY INTERFACE_COMPILE_OPTIONS ${TBB_COMMON_COMPILE_FLAGS})
          +endif()
          EOL
          
          echo "应用补丁..."
          patch -p1 < patch_tbb.txt || echo "补丁应用失败，可能文件已经修改或路径不正确"
          echo "补丁应用完成"
      
      # 检查并手动添加TBB_USE_EXCEPTIONS定义 - 不再使用sed修改文件
      - name: Create CMake Options File
        run: |
          echo "创建CMake自定义选项文件..."
          mkdir -p build
          cat > build/emscripten_options.cmake << 'EOL'
          # TBB配置
          set(TBB_STRICT ON CACHE BOOL "" FORCE)
          set(TBB_TEST OFF CACHE BOOL "" FORCE)
          set(TBB_ENABLE_SHARED OFF CACHE BOOL "" FORCE)
          # 禁用TBB异常
          add_compile_definitions(TBB_USE_EXCEPTIONS=0)
          EOL
      
      # 配置CMake
      - name: Configure CMake
        run: |
          echo "配置CMake..."
          source $EMSDK/emsdk_env.sh
          cd build
          
          # 使用emcmake自动配置，添加我们的选项文件
          emcmake cmake \
            ../emscripten_port \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX:PATH=../instdir \
            -DTBB_STRICT=ON \
            -DTBB_TEST=OFF \
            -DTBB_ENABLE_SHARED=OFF \
            -C ./emscripten_options.cmake
      
      # 构建项目
      - name: Build
        working-directory: build
        run: |
          echo "开始构建项目..."
          source $EMSDK/emsdk_env.sh
          emmake make project -j$(nproc) VERBOSE=1
          echo "构建完成"
          
          # 检查构建结果
          echo "构建结果目录结构:"
          ls -la ../ || echo "目录不存在"
          ls -la ../build_packed/ || echo "build_packed目录不存在"
          find .. -name "project.*" -type f
      
      # 复制生成的WebAssembly文件
      - name: Prepare artifacts
        run: |
          echo "准备构建产物..."
          mkdir -p wasm_build
          
          # 检查多个可能的位置
          for dir in "build_packed" "build"; do
            if [ -d "$dir" ]; then
              echo "检查目录: $dir"
              find "$dir" -name "project.*" -type f -exec cp {} wasm_build/ \;
            fi
          done
          
          # 如果仍然没有找到，执行全局搜索
          if [ ! "$(ls -A wasm_build 2>/dev/null)" ]; then
            echo "警告: 构建产物不在预期位置，尝试全局查找..."
            for file in $(find . -name "project.js" -o -name "project.wasm" -o -name "project.data"); do
              cp "$file" wasm_build/
              echo "已复制: $file 到 wasm_build/"
            done
          fi
          
          echo "wasm_build目录内容:"
          ls -la wasm_build/ || echo "wasm_build目录为空"
      
      # 上传构建产物
      - name: Upload WebAssembly artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-build
          path: |
            wasm_build/
            build/project.*
            build_packed/project.*
          if-no-files-found: warn
      
      # 如果是发布，打包并上传
      - name: Pack release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        run: |
          if [ -d "wasm_build" ] && [ "$(ls -A wasm_build 2>/dev/null)" ]; then
            cd wasm_build
            7z a ../wasm-build.zip .
          else
            echo "警告: wasm_build目录为空，尝试打包可能找到的文件"
            mkdir -p temp_pack
            find . -name "project.js" -o -name "project.wasm" -o -name "project.data" -exec cp {} temp_pack/ \;
            cd temp_pack
            7z a ../wasm-build.zip .
          fi
      
      - name: Upload release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        uses: softprops/action-gh-release@v2
        with:
          files: wasm-build.zip