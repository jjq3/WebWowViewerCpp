name: WebAssembly Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [created]
  # 允许手动触发
  workflow_dispatch:

jobs:
  build-wasm:
    name: Emscripten Build
    runs-on: ubuntu-latest
    
    steps:
      # 检出代码，包括子模块
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      
      # 设置Python
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      # 打印环境信息
      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
          echo "当前目录内容:"
          ls -la
      
      # 安装依赖
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build cmake xorg-dev libglu1-mesa-dev p7zip-full
          ninja --version
          cmake --version
          gcc --version
      
      # 手动安装Emscripten SDK（不使用GitHub Actions缓存）
      - name: Install Emscripten SDK
        run: |
          echo "正在安装Emscripten SDK..."
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install 3.1.19
          ./emsdk activate 3.1.19
          echo "Emscripten SDK安装完成"
          
          # 设置环境变量以在后续步骤中使用
          echo "EMSDK=$(pwd)" >> $GITHUB_ENV
          echo "EM_CONFIG=$(pwd)/.emscripten" >> $GITHUB_ENV
          echo "EMSDK_NODE=$(pwd)/node/14.18.2_64bit/bin/node" >> $GITHUB_ENV
          echo "PATH=$(pwd):$(pwd)/upstream/emscripten:$(pwd)/node/14.18.2_64bit/bin:$PATH" >> $GITHUB_ENV
      
      # 验证Emscripten安装
      - name: Verify Emscripten
        run: |
          source $EMSDK/emsdk_env.sh
          emcc --version
          which emcc
          which em++
      
      # 修改TBB源代码以解决构建问题
      - name: Fix TBB issues
        shell: bash
        run: |
          echo "修改TBB文件以兼容Emscripten..."
          
          # 1. 修复Threads::Threads问题
          TBB_CLANG_FILE="wowViewerLib/3rdparty/oneTbb/cmake/compilers/Clang.cmake"
          if [ -f "$TBB_CLANG_FILE" ]; then
            echo "正在修改 $TBB_CLANG_FILE"
            sed -i 's/set_property(TARGET Threads::Threads PROPERTY INTERFACE_COMPILE_OPTIONS ${TBB_COMMON_COMPILE_FLAGS})/if(TARGET Threads::Threads)\n  set_property(TARGET Threads::Threads PROPERTY INTERFACE_COMPILE_OPTIONS ${TBB_COMMON_COMPILE_FLAGS})\nendif()/g' "$TBB_CLANG_FILE"
            echo "修改后的文件内容:"
            cat "$TBB_CLANG_FILE" | grep -A5 -B5 "Threads::Threads"
          else
            echo "错误：找不到文件 $TBB_CLANG_FILE"
            exit 1
          fi
          
          # 2. 修复共享库问题
          TBB_SRC_CMAKE="wowViewerLib/3rdparty/oneTbb/src/tbb/CMakeLists.txt"
          if [ -f "$TBB_SRC_CMAKE" ]; then
            echo "正在修改 $TBB_SRC_CMAKE"
            sed -i 's/add_library(tbb SHARED/add_library(tbb STATIC/g' "$TBB_SRC_CMAKE"
            echo "修改后的文件内容:"
            cat "$TBB_SRC_CMAKE" | grep -A3 -B3 "add_library"
          else
            echo "错误：找不到文件 $TBB_SRC_CMAKE"
            exit 1
          fi
          
          # 3. 修改主TBB CMakeLists.txt禁用共享库
          TBB_MAIN_CMAKE="wowViewerLib/3rdparty/oneTbb/CMakeLists.txt"
          if [ -f "$TBB_MAIN_CMAKE" ]; then
            echo "正在修改 $TBB_MAIN_CMAKE"
            
            # 添加更多EMSCRIPTEN相关设置
            sed -i '/if(EMSCRIPTEN)/a \
              message("Configuring for Emscripten")\n \
              set(TBB_ENABLE_SHARED OFF CACHE BOOL "Build shared TBB libs" FORCE)\n \
              set(TBB_WINDOWS_DRIVER OFF CACHE BOOL "Build the TBB with Windows driver" FORCE)\n \
              add_definitions(-DTBB_USE_EXCEPTIONS=0)\n \
              add_definitions(-DTBB_ALLOCATOR_BYPASS=1)\n \
              add_definitions(-DTBB_SUPPRESS_DEPRECATED_MESSAGES=1)\n \
              find_package(Threads QUIET)\n \
              if(NOT Threads_FOUND)\n \
                add_library(Threads_Threads INTERFACE)\n \
                add_library(Threads::Threads ALIAS Threads_Threads)\n \
              endif()' "$TBB_MAIN_CMAKE"
              
            echo "修改后的文件内容:"
            cat "$TBB_MAIN_CMAKE" | grep -A15 -B3 "if(EMSCRIPTEN)"
          else
            echo "错误：找不到文件 $TBB_MAIN_CMAKE"
            exit 1
          fi
      
      # 创建预配置文件
      - name: Create CMake Preload Script
        run: |
          cat > emscripten_preload.cmake << 'EOL'
          # 设置TBB选项
          set(TBB_STRICT ON CACHE BOOL "")
          set(TBB_TEST OFF CACHE BOOL "")
          set(TBB_ENABLE_SHARED OFF CACHE BOOL "")
          set(TBB_WINDOWS_DRIVER OFF CACHE BOOL "")
          
          # 定义预处理标志
          add_compile_definitions(TBB_USE_EXCEPTIONS=0)
          add_compile_definitions(TBB_ALLOCATOR_BYPASS=1)
          add_compile_definitions(TBB_SUPPRESS_DEPRECATED_MESSAGES=1)
          
          # 显式设置编译选项，禁用异常和RTTI
          set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-exceptions -fno-rtti")
          
          # 禁用共享库
          set(BUILD_SHARED_LIBS OFF CACHE BOOL "" FORCE)
          EOL
      
      # 配置CMake
      - name: Configure CMake
        run: |
          echo "配置CMake..."
          source $EMSDK/emsdk_env.sh
          mkdir -p build
          cd build
          
          # 使用emcmake配置，传递我们的预加载脚本
          emcmake cmake \
            ../emscripten_port \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX:PATH=../instdir \
            -C ../emscripten_preload.cmake
      
      # 构建项目
      - name: Build
        working-directory: build
        run: |
          echo "开始构建项目..."
          source $EMSDK/emsdk_env.sh
          # 使用单线程构建，以减少内存使用
          emmake make project -j1 VERBOSE=1
          echo "构建完成"
          
          # 检查构建结果
          echo "构建结果目录结构:"
          find ../ -name "project.*" -type f
      
      # 复制生成的WebAssembly文件
      - name: Prepare artifacts
        run: |
          echo "准备构建产物..."
          mkdir -p wasm_build
          
          # 查找所有project.*文件并复制到wasm_build
          for file in $(find . -name "project.*" -type f); do
            cp "$file" wasm_build/
            echo "已复制: $file 到 wasm_build/"
          done
          
          echo "wasm_build目录内容:"
          ls -la wasm_build/ || echo "wasm_build目录为空"
      
      # 上传构建产物
      - name: Upload WebAssembly artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-build
          path: wasm_build/
          if-no-files-found: warn
      
      # 如果是发布，打包并上传
      - name: Pack release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        run: |
          if [ -d "wasm_build" ] && [ "$(ls -A wasm_build 2>/dev/null)" ]; then
            cd wasm_build
            7z a ../wasm-build.zip .
            echo "已创建wasm-build.zip"
          else
            echo "警告: wasm_build目录为空，无法创建发布包"
            exit 1
          fi
      
      - name: Upload release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        uses: softprops/action-gh-release@v2
        with:
          files: wasm-build.zip