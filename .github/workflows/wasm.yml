name: WebAssembly Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [created]
  # 允许手动触发
  workflow_dispatch:

jobs:
  build-wasm:
    name: Emscripten Build
    runs-on: ubuntu-latest
    
    steps:
      # 检出代码，包括子模块
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      
      # 设置Python
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      # 打印环境信息和目录结构
      - name: Print env and explore repo
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
          echo "当前目录内容:"
          ls -la
          echo "查看emscripten_port目录:"
          ls -la emscripten_port || echo "emscripten_port目录不存在"
      
      # 安装依赖
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build cmake xorg-dev libglu1-mesa-dev p7zip-full
          ninja --version
          cmake --version
          gcc --version
      
      # 手动安装Emscripten SDK（不使用GitHub Actions缓存）
      - name: Install Emscripten SDK
        run: |
          echo "正在安装Emscripten SDK..."
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install 3.1.19
          ./emsdk activate 3.1.19
          echo "Emscripten SDK安装完成"
          
          # 为后续步骤设置环境变量
          EMSDK_PATH="$(pwd)"
          echo "EMSDK=$EMSDK_PATH" >> $GITHUB_ENV
          echo "PATH=$EMSDK_PATH:$EMSDK_PATH/upstream/emscripten:$EMSDK_PATH/node/14.18.2_64bit/bin:$PATH" >> $GITHUB_ENV
      
      # 验证Emscripten安装
      - name: Verify Emscripten
        run: |
          source $EMSDK/emsdk_env.sh
          emcc --version
          which emcc
      
      # 准备TBB配置
      - name: Prepare TBB config
        run: |
          mkdir -p cmake_custom
          
          # 创建TBB配置文件
          cat > cmake_custom/tbb_config.cmake << 'EOL'
          # 禁用TBB共享库
          set(BUILD_SHARED_LIBS OFF CACHE BOOL "Build shared libraries" FORCE)
          set(TBB_BUILD_SHARED OFF CACHE BOOL "Build TBB shared library" FORCE)
          set(TBB_ENABLE_SHARED OFF CACHE BOOL "Enable TBB shared library" FORCE)
          
          # TBB设置
          set(TBB_STRICT ON CACHE BOOL "Enable strict mode" FORCE)
          set(TBB_TEST OFF CACHE BOOL "Enable TBB tests" FORCE)
          
          # 禁用TBB异常
          add_definitions(-DTBB_USE_EXCEPTIONS=0)
          add_definitions(-DTBB_IMPLEMENT_CPP0X=0)
          add_definitions(-DTBB_ALLOCATOR_BYPASS=1)
          EOL
          
          # 创建补丁文件
          cat > patch_threads.patch << 'EOL'
          --- a/wowViewerLib/3rdparty/oneTbb/cmake/compilers/Clang.cmake
          +++ b/wowViewerLib/3rdparty/oneTbb/cmake/compilers/Clang.cmake
          @@ -17,7 +17,9 @@ if (NOT MSVC)
               set(TBB_LIB_COMPILE_FLAGS -fPIC -Wno-missing-braces)
           endif()
           
          -set_property(TARGET Threads::Threads PROPERTY INTERFACE_COMPILE_OPTIONS ${TBB_COMMON_COMPILE_FLAGS})
          +if (TARGET Threads::Threads)
          +  set_property(TARGET Threads::Threads PROPERTY INTERFACE_COMPILE_OPTIONS ${TBB_COMMON_COMPILE_FLAGS})
          +endif()
          EOL
          
          # 尝试应用补丁
          patch -p1 < patch_threads.patch || echo "补丁应用失败，可能已经修改过或文件不匹配"
      
      # 配置并构建 - 使用Ninja构建系统
      - name: Configure and build
        run: |
          source $EMSDK/emsdk_env.sh
          
          # 创建并进入构建目录
          mkdir -p build
          cd build
          
          # 配置项目使用Ninja构建系统
          echo "配置CMake使用Ninja..."
          emcmake cmake ../emscripten_port \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=../instdir \
            -DTBB_STRICT=ON \
            -DTBB_TEST=OFF \
            -DTBB_ENABLE_SHARED=OFF \
            -C ../cmake_custom/tbb_config.cmake
          
          # 构建项目
          echo "开始构建..."
          emmake ninja
          
          echo "构建完成，查找结果..."
          find .. -name "project.*" -type f
      
      # 尝试直接编译main.cpp（如果上面的构建失败）
      - name: Try direct compilation
        if: failure()
        run: |
          source $EMSDK/emsdk_env.sh
          
          echo "尝试直接编译main.cpp..."
          # 检查main.cpp文件位置
          find . -name "main.cpp" | grep -v node_modules
          
          # 如果找到emscripten_port/src/main.cpp，尝试直接编译
          if [ -f "emscripten_port/src/main.cpp" ]; then
            mkdir -p direct_build
            cd direct_build
            
            # 编译main.cpp为WebAssembly
            echo "编译main.cpp..."
            emcc ../emscripten_port/src/main.cpp \
              -o project.js \
              -s WASM=1 \
              -s ALLOW_MEMORY_GROWTH=1 \
              -s ASSERTIONS=1 \
              -O2
            
            echo "直接编译结果:"
            ls -la
            
            # 回到根目录
            cd ..
          else
            echo "未找到main.cpp文件"
          fi
      
      # 收集构建产物
      - name: Collect build artifacts
        run: |
          mkdir -p wasm_build
          
          # 从所有可能的位置收集构建产物
          echo "收集构建产物..."
          
          # 从build目录
          if [ -d "build" ]; then
            find build -name "project.js" -o -name "project.wasm" -o -name "project.data" -exec cp {} wasm_build/ \;
          fi
          
          # 从build_packed目录
          if [ -d "build_packed" ]; then
            find build_packed -name "project.js" -o -name "project.wasm" -o -name "project.data" -exec cp {} wasm_build/ \;
          fi
          
          # 从direct_build目录
          if [ -d "direct_build" ]; then
            find direct_build -name "project.js" -o -name "project.wasm" -o -name "project.data" -exec cp {} wasm_build/ \;
          fi
          
          # 如果还是没找到，搜索整个仓库
          if [ ! "$(ls -A wasm_build 2>/dev/null)" ]; then
            echo "在构建目录中未找到文件，搜索整个仓库..."
            find . -name "*.js" -o -name "*.wasm" -o -name "*.data" | grep -v node_modules | head -n 10 | xargs -I{} cp {} wasm_build/ || true
          fi
          
          echo "wasm_build目录内容:"
          ls -la wasm_build/ || echo "wasm_build目录为空"
      
      # 上传构建产物
      - name: Upload WebAssembly artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-build
          path: wasm_build/
          if-no-files-found: warn
      
      # 如果是发布，打包并上传
      - name: Pack release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        run: |
          if [ -d "wasm_build" ] && [ "$(ls -A wasm_build 2>/dev/null)" ]; then
            cd wasm_build
            7z a ../wasm-build.zip .
            echo "已创建wasm-build.zip"
          else
            echo "警告: wasm_build目录为空，无法创建发布包"
            exit 1
          fi
      
      - name: Upload release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        uses: softprops/action-gh-release@v2
        with:
          files: wasm-build.zip