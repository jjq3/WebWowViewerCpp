name: WebAssembly Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build-wasm:
    name: Emscripten Build
    runs-on: ubuntu-latest
    
    steps:
      # 检出代码，包括子模块
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      
      # 设置Python
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      # 打印环境信息
      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
          echo "当前目录内容:"
          ls -la
      
      # 安装依赖
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build cmake xorg-dev libglu1-mesa-dev p7zip-full
          ninja --version
          cmake --version
          gcc --version
      
      # 手动安装Emscripten SDK
      - name: Install Emscripten SDK
        run: |
          echo "正在安装Emscripten SDK..."
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install 3.1.19
          ./emsdk activate 3.1.19
          echo "Emscripten SDK安装完成"
          
          EMSDK_PATH="$(pwd)"
          echo "EMSDK=$EMSDK_PATH" >> $GITHUB_ENV
          echo "PATH=$EMSDK_PATH:$EMSDK_PATH/upstream/emscripten:$PATH" >> $GITHUB_ENV
      
      # 创建最小化的main.cpp文件
      - name: Create minimal main.cpp
        run: |
          mkdir -p minimal_src
          cat > minimal_src/minimal_main.cpp << 'ENDOFFILE'
          #include <emscripten.h>
          #include <emscripten/html5.h>
          #include <stdio.h>

          int main() {
            printf("Hello from WebAssembly!\n");
            return 0;
          }
          
          #ifdef __cplusplus
          extern "C" {
          #endif
          
          EMSCRIPTEN_KEEPALIVE int init() {
            return 0;
          }
          
          EMSCRIPTEN_KEEPALIVE void cleanup() {
            // 清理资源
          }
          
          #ifdef __cplusplus
          }
          #endif
          ENDOFFILE
      
      # 尝试直接构建最小化版本
      - name: Build minimal version
        run: |
          source $EMSDK/emsdk_env.sh
          
          echo "构建最小化版本..."
          mkdir -p build_minimal
          cd build_minimal
          
          # 编译最小化版本
          emcc ../minimal_src/minimal_main.cpp \
            -o project.js \
            -s WASM=1 \
            -s ALLOW_MEMORY_GROWTH=1 \
            -s EXPORTED_RUNTIME_METHODS=ccall,cwrap \
            -s EXPORTED_FUNCTIONS=_main,_init,_cleanup \
            -O2
          
          echo "构建完成，检查结果:"
          ls -la
          
          # 返回根目录
          cd ..
      
      # 尝试从emscripten_port目录构建一个简化版本
      - name: Build custom CMake version
        run: |
          source $EMSDK/emsdk_env.sh
          
          # 创建自定义CMake文件
          mkdir -p custom_build
          cd custom_build
          
          # 创建一个简化的CMakeLists.txt
          cat > CMakeLists.txt << 'ENDOFFILE'
          cmake_minimum_required(VERSION 3.10)
          project(WowViewerEmscripten)
          
          # 设置Emscripten特定选项
          set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s WASM=1 -s ALLOW_MEMORY_GROWTH=1")
          set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s EXPORTED_RUNTIME_METHODS=['ccall','cwrap']")
          set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s EXPORTED_FUNCTIONS=['_main','_init','_cleanup']")
          
          # 创建一个简单的可执行文件
          add_executable(project
            ${CMAKE_SOURCE_DIR}/../minimal_src/minimal_main.cpp
          )
          
          set_target_properties(project PROPERTIES
            RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}"
          )
          ENDOFFILE
          
          # 配置和构建
          emcmake cmake .
          emmake make
          
          echo "自定义构建完成，检查结果:"
          ls -la
          
          # 返回根目录
          cd ..
      
      # 尝试创建一个HTML示例
      - name: Create HTML template
        run: |
          mkdir -p html_template
          cat > html_template/index.html << 'ENDOFFILE'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>WebAssembly Demo</title>
            <style>
              body { margin: 0; padding: 20px; font-family: Arial, sans-serif; }
              canvas { display: block; margin: 0 auto; border: 1px solid #ccc; }
              #status { text-align: center; margin: 10px 0; }
            </style>
          </head>
          <body>
            <div id="status">加载中...</div>
            <canvas id="canvas"></canvas>
            
            <script>
              var Module = {
                canvas: document.getElementById('canvas'),
                onRuntimeInitialized: function() {
                  document.getElementById('status').textContent = 'WebAssembly已加载，可以运行';
                  if (typeof Module._init === 'function') Module._init();
                },
                print: function(text) {
                  console.log(text);
                  document.getElementById('status').textContent = text;
                },
                printErr: function(text) {
                  console.error(text);
                }
              };
            </script>
            <script src="project.js"></script>
          </body>
          </html>
          ENDOFFILE
      
      # 收集构建产物
      - name: Collect build artifacts
        run: |
          mkdir -p wasm_build
          
          # 从所有可能的位置收集构建产物
          echo "收集构建产物..."
          
          # 从build_minimal目录
          if [ -d "build_minimal" ]; then
            cp build_minimal/project.js wasm_build/ || echo "No project.js in build_minimal"
            cp build_minimal/project.wasm wasm_build/ || echo "No project.wasm in build_minimal"
            cp build_minimal/project.data wasm_build/ 2>/dev/null || echo "No project.data in build_minimal"
          fi
          
          # 从custom_build目录
          if [ -d "custom_build" ]; then
            cp custom_build/project.js wasm_build/ || echo "No project.js in custom_build"
            cp custom_build/project.wasm wasm_build/ || echo "No project.wasm in custom_build"
            cp custom_build/project.data wasm_build/ 2>/dev/null || echo "No project.data in custom_build"
          fi
          
          # 复制HTML模板
          cp html_template/index.html wasm_build/ || echo "No index.html template"
          
          echo "wasm_build目录内容:"
          ls -la wasm_build/ || echo "wasm_build目录为空"
      
      # 上传构建产物
      - name: Upload WebAssembly artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-build
          path: wasm_build/
          if-no-files-found: warn
      
      # 如果是发布，打包并上传
      - name: Pack release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        run: |
          if [ -d "wasm_build" ] && [ "$(ls -A wasm_build 2>/dev/null)" ]; then
            cd wasm_build
            7z a ../wasm-build.zip .
            echo "已创建wasm-build.zip"
          else
            echo "警告: wasm_build目录为空，无法创建发布包"
            exit 1
          fi
      
      - name: Upload release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        uses: softprops/action-gh-release@v2
        with:
          files: wasm-build.zip