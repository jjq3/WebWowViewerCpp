name: WebAssembly Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  release:
    types: [created]
  # 允许手动触发
  workflow_dispatch:

jobs:
  build-wasm:
    name: Emscripten Build
    runs-on: ubuntu-latest
    
    steps:
      # 检出代码，包括子模块
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      
      # 设置Python
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      # 打印环境信息和目录结构
      - name: Print env and explore repo
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
          echo "当前目录内容:"
          ls -la
          echo "查看emscripten_port目录:"
          ls -la emscripten_port || echo "emscripten_port目录不存在"
          echo "检查wowViewerLib目录:"
          ls -la wowViewerLib || echo "wowViewerLib目录不存在"
      
      # 安装依赖
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build cmake xorg-dev libglu1-mesa-dev p7zip-full
          ninja --version
          cmake --version
          gcc --version
      
      # 手动安装Emscripten SDK（不使用GitHub Actions缓存）
      - name: Install Emscripten SDK
        run: |
          echo "正在安装Emscripten SDK..."
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install 3.1.19
          ./emsdk activate 3.1.19
          echo "Emscripten SDK安装完成"
          
          # 设置环境变量以在后续步骤中使用
          echo "EMSDK=$(pwd)" >> $GITHUB_ENV
          echo "EM_CONFIG=$(pwd)/.emscripten" >> $GITHUB_ENV
          echo "EMSDK_NODE=$(pwd)/node/14.18.2_64bit/bin/node" >> $GITHUB_ENV
          echo "PATH=$(pwd):$(pwd)/upstream/emscripten:$(pwd)/node/14.18.2_64bit/bin:$PATH" >> $GITHUB_ENV
      
      # 验证Emscripten安装
      - name: Verify Emscripten
        run: |
          source $EMSDK/emsdk_env.sh
          emcc --version
          which emcc
          which em++
      
      # 创建自定义TBB CMake配置
      - name: Create custom TBB config
        run: |
          # 创建一个自定义的TBB配置文件
          mkdir -p cmake_custom
          cat > cmake_custom/tbb_config.cmake << 'EOL'
          # 禁用TBB共享库
          set(BUILD_SHARED_LIBS OFF CACHE BOOL "Build shared libraries" FORCE)
          set(TBB_BUILD_SHARED OFF CACHE BOOL "Build TBB shared library" FORCE)
          set(TBB_ENABLE_SHARED OFF CACHE BOOL "Enable TBB shared library" FORCE)
          
          # 确保TBB严格模式打开
          set(TBB_STRICT ON CACHE BOOL "Enable strict mode" FORCE)
          
          # 禁用TBB测试
          set(TBB_TEST OFF CACHE BOOL "Enable TBB tests" FORCE)
          
          # 添加线程支持
          if(NOT TARGET Threads::Threads)
            add_library(Threads_Threads INTERFACE)
            add_library(Threads::Threads ALIAS Threads_Threads)
          endif()
          
          # 禁用TBB异常
          add_definitions(-DTBB_USE_EXCEPTIONS=0)
          add_definitions(-DTBB_IMPLEMENT_CPP0X=0)
          
          # 其他Emscripten特定设置
          if(EMSCRIPTEN)
            add_definitions(-DTBB_USE_EXCEPTIONS=0)
            add_definitions(-DTBB_ALLOCATOR_BYPASS=1)
          endif()
          EOL
      
      # 准备一个模块化的构建脚本
      - name: Prepare build script
        run: |
          cat > build_wasm.sh << 'EOL'
          #!/bin/bash
          set -e
          
          # 设置Emscripten环境
          source $EMSDK/emsdk_env.sh
          
          # 创建构建目录
          mkdir -p build
          cd build
          
          # 配置CMake
          emcmake cmake \
            ../emscripten_port \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX:PATH=../instdir \
            -C ../cmake_custom/tbb_config.cmake \
            -DEMSCRIPTEN_GENERATE_BITCODE_STATIC_LIBRARIES=ON
          
          # 构建项目
          emmake make -j2 VERBOSE=1
          
          # 寻找构建产物
          echo "构建结果:"
          find .. -name "project.js" -o -name "project.wasm" -o -name "project.data"
          
          # 返回到原目录
          cd ..
          EOL
          
          chmod +x build_wasm.sh
      
      # 尝试构建
      - name: Build WebAssembly
        run: |
          # 设置Emscripten环境变量
          source $EMSDK/emsdk_env.sh
          
          # 禁用TBB共享库和异常处理的环境变量
          export EM_COMPILER_WRAPPER="--no-entry"
          export EM_CACHE_LINK_FLAGS="--no-entry"
          export EM_COMPILER_WRAPPER="--no-exceptions"
          
          # 执行构建脚本
          ./build_wasm.sh
      
      # 收集构建产物
      - name: Collect build artifacts
        run: |
          mkdir -p wasm_build
          
          # 查找并复制WebAssembly文件
          for file in $(find . -name "project.js" -o -name "project.wasm" -o -name "project.data"); do
            cp "$file" wasm_build/
            echo "已复制: $file 到 wasm_build/"
          done
          
          # 如果没有找到文件，尝试从其他地方复制
          if [ ! "$(ls -A wasm_build 2>/dev/null)" ]; then
            echo "警告: 没有找到标准命名的文件，尝试查找其他可能的WebAssembly文件..."
            for file in $(find . -name "*.js" -o -name "*.wasm" -o -name "*.data" | grep -v "node_modules"); do
              cp "$file" wasm_build/
              echo "已复制: $file 到 wasm_build/"
            done
          fi
          
          echo "wasm_build目录内容:"
          ls -la wasm_build/ || echo "wasm_build目录为空"
      
      # 尝试备用构建方法
      - name: Try alternate build method if needed
        if: success() != true
        run: |
          echo "主要构建方法失败，尝试备用方法..."
          source $EMSDK/emsdk_env.sh
          
          # 创建一个简单的CMake构建文件
          cat > simple_build.cmake << 'EOL'
          cmake_minimum_required(VERSION 3.10)
          project(EmscriptenBuild)
          
          # 设置选项以禁用TBB共享库
          set(BUILD_SHARED_LIBS OFF CACHE BOOL "" FORCE)
          set(TBB_ENABLE_SHARED OFF CACHE BOOL "" FORCE)
          set(TBB_TEST OFF CACHE BOOL "" FORCE)
          
          # 添加emscripten_port子目录
          add_subdirectory(emscripten_port)
          EOL
          
          # 尝试使用简化的构建方法
          mkdir -p build_alt
          cd build_alt
          emcmake cmake -P ../simple_build.cmake
          emmake make -j2
          cd ..
          
          # 收集任何生成的文件
          for file in $(find build_alt -name "*.js" -o -name "*.wasm" -o -name "*.data"); do
            cp "$file" wasm_build/
            echo "已复制: $file 到 wasm_build/"
          done
      
      # 上传构建产物
      - name: Upload WebAssembly artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-build
          path: wasm_build/
          if-no-files-found: warn
      
      # 如果是发布，打包并上传
      - name: Pack release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        run: |
          if [ -d "wasm_build" ] && [ "$(ls -A wasm_build 2>/dev/null)" ]; then
            cd wasm_build
            7z a ../wasm-build.zip .
            echo "已创建wasm-build.zip"
          else
            echo "警告: wasm_build目录为空，无法创建发布包"
            exit 1
          fi
      
      - name: Upload release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        uses: softprops/action-gh-release@v2
        with:
          files: wasm-build.zip